name: Deploy to Production

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Firebase configuration
        run: |
          echo "Validating Firebase configuration..."
          if [ -f "firebase.json" ]; then
            echo "✓ firebase.json found"
          else
            echo "✗ firebase.json not found"
            exit 1
          fi

      - name: Create production environment file
        run: |
          echo "Creating .env.production file from GitHub secrets"
          cat > .env.production << EOF
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ env.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ env.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ env.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ env.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ env.REACT_APP_FIREBASE_MEASUREMENT_ID }}
          REACT_APP_MONZO_CLIENT_ID=${{ env.REACT_APP_MONZO_CLIENT_ID }}
          REACT_APP_MONZO_REDIRECT_URI=${{ env.REACT_APP_MONZO_REDIRECT_URI }}
          REACT_APP_MONZO_CLIENT_SECRET=${{ secrets.REACT_APP_MONZO_CLIENT_SECRET }}
          EOF
          echo "✓ Created .env.production file with environment variables"

      - name: Extract Jira ticket number
        id: jira-ticket
        run: |
          # Extract from PR title first, then branch name
          JIRA_TICKET=$(echo "${{ github.event.pull_request.title }}" | grep -oE '[A-Z]+-[0-9]+' | head -1 || echo "")
          if [ -z "$JIRA_TICKET" ]; then
            JIRA_TICKET=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oE '[A-Z]+-[0-9]+' | head -1 || echo "no-ticket")
          fi
          
          echo "ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
          echo "Found Jira ticket: $JIRA_TICKET"

      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `Production deployment for ${{ steps.jira-ticket.outputs.ticket }} from PR #${{ github.event.pull_request.number }}`,
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Running production deployment...'
            });

      - name: Build and deploy to production
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_MONZO_FLOW }}
          channelId: live
          projectId: production
        env:
          FIREBASE_CLI_EXPERIMENTS: webframework,webframeworks
          CI: false

      - name: Set deployment status (success/failure)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const outcome = "${{ steps.deploy.outcome }}";
            const state = outcome === "success" ? "success" : "failure";
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state,
              description: state === "success" ? "Successfully deployed to production" : "Production deployment failed",
              environment_url: state === "success" ? "https://monzo-flow.web.app" : undefined
            });

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f firebase-service-account.json
          rm -f .env.production
          echo "Cleaned up temporary files including .env.production"

      - name: Fail job if deployment failed
        if: steps.deploy.outcome == 'failure'
        run: exit 1
